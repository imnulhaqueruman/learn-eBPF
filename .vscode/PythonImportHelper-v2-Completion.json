[
    {
        "label": "BPF",
        "importPath": "bcc",
        "description": "bcc",
        "isExtraImport": true,
        "detail": "bcc",
        "documentation": {}
    },
    {
        "label": "BPF",
        "importPath": "bcc",
        "description": "bcc",
        "isExtraImport": true,
        "detail": "bcc",
        "documentation": {}
    },
    {
        "label": "BPF",
        "importPath": "bcc",
        "description": "bcc",
        "isExtraImport": true,
        "detail": "bcc",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "program",
        "kind": 5,
        "importPath": "hello",
        "description": "hello",
        "peekOfCode": "program = r\"\"\"\nint hello(void *ctx) {\n    bpf_trace_printk(\"Hello World!\");\n    return 0;\n}\n\"\"\"\nb = BPF(text=program)\nsyscall = b.get_syscall_fnname(\"execve\")\nb.attach_kprobe(event=syscall, fn_name=\"hello\")\nb.trace_print()",
        "detail": "hello",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "hello",
        "description": "hello",
        "peekOfCode": "b = BPF(text=program)\nsyscall = b.get_syscall_fnname(\"execve\")\nb.attach_kprobe(event=syscall, fn_name=\"hello\")\nb.trace_print()",
        "detail": "hello",
        "documentation": {}
    },
    {
        "label": "syscall",
        "kind": 5,
        "importPath": "hello",
        "description": "hello",
        "peekOfCode": "syscall = b.get_syscall_fnname(\"execve\")\nb.attach_kprobe(event=syscall, fn_name=\"hello\")\nb.trace_print()",
        "detail": "hello",
        "documentation": {}
    },
    {
        "label": "print_event",
        "kind": 2,
        "importPath": "hello_buffer",
        "description": "hello_buffer",
        "peekOfCode": "def print_event(cpu, data, size):  \n   data = b[\"output\"].event(data)\n   print(f\"{data.pid} {data.uid} {data.command.decode()} {data.message.decode()}\")\nb[\"output\"].open_perf_buffer(print_event) \nwhile True:   \n   b.perf_buffer_poll()",
        "detail": "hello_buffer",
        "documentation": {}
    },
    {
        "label": "program",
        "kind": 5,
        "importPath": "hello_buffer",
        "description": "hello_buffer",
        "peekOfCode": "program = r\"\"\"\nBPF_PERF_OUTPUT(output); \nstruct data_t {     \n   int pid;\n   int uid;\n   char command[16];\n   char message[12];\n};\nint hello(void *ctx) {\n   struct data_t data = {}; ",
        "detail": "hello_buffer",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "hello_buffer",
        "description": "hello_buffer",
        "peekOfCode": "b = BPF(text=program) \nsyscall = b.get_syscall_fnname(\"execve\")\nb.attach_kprobe(event=syscall, fn_name=\"hello\")\ndef print_event(cpu, data, size):  \n   data = b[\"output\"].event(data)\n   print(f\"{data.pid} {data.uid} {data.command.decode()} {data.message.decode()}\")\nb[\"output\"].open_perf_buffer(print_event) \nwhile True:   \n   b.perf_buffer_poll()",
        "detail": "hello_buffer",
        "documentation": {}
    },
    {
        "label": "syscall",
        "kind": 5,
        "importPath": "hello_buffer",
        "description": "hello_buffer",
        "peekOfCode": "syscall = b.get_syscall_fnname(\"execve\")\nb.attach_kprobe(event=syscall, fn_name=\"hello\")\ndef print_event(cpu, data, size):  \n   data = b[\"output\"].event(data)\n   print(f\"{data.pid} {data.uid} {data.command.decode()} {data.message.decode()}\")\nb[\"output\"].open_perf_buffer(print_event) \nwhile True:   \n   b.perf_buffer_poll()",
        "detail": "hello_buffer",
        "documentation": {}
    },
    {
        "label": "program",
        "kind": 5,
        "importPath": "hello_map",
        "description": "hello_map",
        "peekOfCode": "program = r\"\"\"\nBPF_HASH(counter_table);\nint hello(void *ctx) {\n   u64 uid;\n   u64 counter = 0;\n   u64 *p;\n   uid = bpf_get_current_uid_gid() & 0xFFFFFFFF;\n   p = counter_table.lookup(&uid);\n   if (p != 0) {\n      counter = *p;",
        "detail": "hello_map",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "hello_map",
        "description": "hello_map",
        "peekOfCode": "b = BPF(text=program)\nsyscall = b.get_syscall_fnname(\"execve\")\nb.attach_kprobe(event=syscall, fn_name=\"hello\")\n# Attach to a tracepoint that gets hit for all syscalls \n# b.attach_raw_tracepoint(tp=\"sys_enter\", fn_name=\"hello\")\nwhile True:\n    sleep(2)\n    s = \"\"\n    for k,v in b[\"counter_table\"].items():\n        s += f\"ID {k.value}: {v.value}\\t\"",
        "detail": "hello_map",
        "documentation": {}
    },
    {
        "label": "syscall",
        "kind": 5,
        "importPath": "hello_map",
        "description": "hello_map",
        "peekOfCode": "syscall = b.get_syscall_fnname(\"execve\")\nb.attach_kprobe(event=syscall, fn_name=\"hello\")\n# Attach to a tracepoint that gets hit for all syscalls \n# b.attach_raw_tracepoint(tp=\"sys_enter\", fn_name=\"hello\")\nwhile True:\n    sleep(2)\n    s = \"\"\n    for k,v in b[\"counter_table\"].items():\n        s += f\"ID {k.value}: {v.value}\\t\"\n    print(s)",
        "detail": "hello_map",
        "documentation": {}
    }
]